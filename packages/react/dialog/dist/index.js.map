{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;ACAA;AAEA,MAAM,4CAAa;AACnB,MAAM,4CAAqB;AAC3B,MAAM,4CAAoB;AAC1B,MAAM,4CAAoB;AAC1B,MAAM,4CAAmB;AAEzB,MAAM,CAAC,2CAAqB,0CAAkB,GAAG,CAAA,GAAA,6CAAkB,AAAD,EAAE;AAEpE,MAAM,4CAAW,CAAC,OAAmB,OAAO,SAAS,QAAQ;;;ADE7D,MAAM,CAAC,sCAAgB,0CAAiB,GACtC,CAAA,GAAA,yCAAmB,AAAD,EAAsB,CAAA,GAAA,yCAAS,GAAG;IAClD,UAAU;IACV,MAAM,KAAK;IACX,cAAc,CAAC,MAAiB,CAAC;IACjC,cAAc,IAAM,CAAC;IACrB,OAAO,IAAI;AACb;AAEF,MAAM,+BAAgC,CAAC,QAAoC;IACzE,MAAM,iBACJ,cAAa,YACb,SAAQ,EACR,MAAM,SAAQ,eACd,YAAW,gBACX,aAAY,SACZ,QAAQ,IAAI,GACb,GAAG;IAEJ,MAAM,aAAa,CAAA,GAAA,sCAAK,AAAD,EAAE,MAAM,CAAoB,IAAI;IACvD,MAAM,aAAa,CAAA,GAAA,sCAAK,AAAD,EAAE,MAAM,CAAuB,IAAI;IAE1D,MAAM,CAAC,OAAO,KAAK,EAAE,QAAQ,GAAG,CAAA,GAAA,4DAAoB,AAAD,EAAE;QACnD,MAAM;QACN,aAAa;QACb,UAAU;IACZ;IAEA,qBACE,gCAAC;QACC,OAAO;QACP,YAAY;QACZ,YAAY;QACZ,UAAU,CAAA,GAAA,2BAAI;QACd,MAAM;QACN,cAAc;QACd,cAAc,CAAA,GAAA,sCAAI,EAAE,WAAW,CAC7B,IAAM,QAAQ,CAAC,WAAa,CAAC,WAC7B;YAAC;SAAQ;QAEX,OAAO;kBAEN;;AAGP;IAEA,2CAAe;;AD3Df;AGAA;;;;;;AAmBA,MAAM,CAAC,sCAAgB,0CAAiB,GACtC,CAAA,GAAA,yCAAmB,AAAD,EAAsB,CAAA,GAAA,yCAAe,GAAG;IACxD,YAAY;AACd;AAEF,MAAM,CAAC,wCAAkB,yCAAmB,GAC1C,CAAA,GAAA,yCAAmB,AAAD,EAA6B,CAAA,GAAA,yCAAiB,GAAG;IACjE,OAAO;AACT;AAEF,MAAM,sCAA+B,CACnC,QACG;IACH,MAAM,QAAE,KAAI,EAAE,GAAG,CAAA,GAAA,yCAAe,EAAE,CAAA,GAAA,yCAAiB,GAAG,MAAM,aAAa;IACzE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,sCAAK,AAAD,EAAE,QAAQ,CAAS;IACjD,MAAM,QAAQ,QAAS,CAAC,QAAQ,QAAQ;IAExC,CAAA,GAAA,qCAAe,AAAD,EAAE;IAEhB,qBACE,gCAAC;QACC,OAAO,IAAM,SAAS,CAAC,OAAS,OAAO;QACvC,SAAS,IAAM,SAAS,CAAC,OAAU,QAAQ,IAAI,IAAI,OAAO,CAAC;QAC3D,OAAO;QACP,OAAO,MAAM,aAAa;kBAEzB,QAAQ,MAAM,QAAQ,GAAG,IAAI;;AAGpC;AAEA,MAAM,qCAA4C,CAChD,QACG;IACH,MAAM,iBAAE,cAAa,cAAE,WAAU,YAAE,SAAQ,aAAE,UAAS,EAAE,GAAG,MAAM,GAAG;IACpE,qBACE,gCAAC;QAAe,OAAO;QAAe,YAAY;kBAChD,cAAA,gCAAC,CAAA,GAAA,gCAAe,AAAD;YACb,WAAW;YACX,SAAS,CAAA,GAAA,sCAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,YAAY;YACzC,GAAG,IAAI;sBAER,cAAA,gCAAC;0BAAe;;;;AAIxB;AAEA,mCAAa,WAAW,GAAG,CAAA,GAAA,yCAAgB,AAAD;AAEnC,MAAM,4CAAiB,CAAC,cAAsB,QAAiB;IACpE,MAAM,WAAW,yCAAmB,cAAc;IAClD,CAAA,GAAA,sCAAI,EAAE,SAAS,CAAC,IAAM;QACpB,SAAS,KAAK;QACd,OAAO,IAAM;YACX,SAAS,OAAO;QAClB;IACF,GAAG,EAAE;AACP;IAEA,2CAAe;;;AC/Ef;;;;;;;;;;;AAoBA,MAAM,yDAAqB,wBAGzB,CAAC,OAA4C,eAAiB;IAC9D,MAAM,iBAAE,cAAa,mBAAE,gBAAe,oBAAE,iBAAgB,EAAE,GAAG,cAAc,GACzE;IAEF,MAAM,aAAa,oBAA6B,IAAI;IACpD,MAAM,UAAU,CAAA,GAAA,yCAAe,EAAE,CAAA,GAAA,yCAAiB,AAAD,GAAG;IAEpD,MAAM,eAAe,CAAA,GAAA,8CAAc,EACjC,cACA,QAAQ,UAAU,EAClB;IAEF,CAAA,GAAA,yCAAa,EAAE,CAAA,GAAA,yCAAgB,GAAG;IAClC,CAAA,GAAA,6CAAa;IAEb,qBACE,gCAAC,CAAA,GAAA,wCAAU,AAAD;QACR,OAAO;QACP,IAAI;QACJ,SAAS,QAAQ,IAAI;QACrB,kBAAkB;QAClB,oBAAoB,CAAA,GAAA,4CAAmB,EACrC,MAAM,gBAAgB,EACtB,CAAC,QAAU;YACT,MAAM,cAAc;YACpB,QAAQ,UAAU,EAAE,SAAS;QAC/B;kBAGF,cAAA,gCAAC,CAAA,GAAA,oDAAgB,AAAD;YACd,MAAK;YACL,IAAI,CAAC,EAAE,QAAQ,QAAQ,CAAC,OAAO,CAAC;YAChC,oBAAkB,CAAC,EAAE,QAAQ,QAAQ,CAAC,WAAW,CAAC;YAClD,mBAAiB,CAAC,EAAE,QAAQ,QAAQ,CAAC,KAAK,CAAC;YAC3C,cAAY,CAAA,GAAA,yCAAQ,AAAD,EAAE,QAAQ,IAAI;YACjC,cAAW;YACV,GAAG,YAAY;YAChB,sBAAsB,CAAA,GAAA,4CAAmB,EACvC,MAAM,oBAAoB,EAC1B,CAAC,QAAU;gBACT,MAAM,gBAAgB,MAAM,MAAM,CAAC,aAAa;gBAChD,MAAM,gBACJ,cAAc,MAAM,KAAK,KAAK,cAAc,OAAO,KAAK,IAAI;gBAC9D,MAAM,eAAe,cAAc,MAAM,KAAK,KAAK;gBAEnD,4DAA4D;gBAC5D,0DAA0D;gBAC1D,IAAI,cAAc,MAAM,cAAc;YACxC;YAEF,gBAAgB,CAAA,GAAA,4CAAmB,EAAE,MAAM,cAAc,EAAE,CAAC,QAC1D,MAAM,cAAc;YAEtB,KAAK;YACL,WAAW,IAAM,QAAQ,YAAY,CAAC,KAAK;;;AAInD;AAEA,MAAM,oDAAgB,wBAGpB,CAAC,OAAwC,eAAiB;IAC1D,MAAM,iBAAE,cAAa,cAAE,WAAU,EAAE,GAAG,cAAc,GAAG;IACvD,MAAM,gBAAgB,CAAA,GAAA,yCAAe,EAAE,CAAA,GAAA,yCAAiB,AAAD,GAAG;IAC1D,MAAM,UAAU,CAAA,GAAA,yCAAe,EAAE,CAAA,GAAA,yCAAiB,AAAD,GAAG;IACpD,qBACE,gCAAC,CAAA,GAAA,oCAAQ,AAAD;QACN,SAAS,AAAC,CAAA,cAAc,cAAc,UAAU,AAAD,KAAM,QAAQ,IAAI;kBAEjE,cAAA,gCAAC;YAAoB,GAAG,YAAY;YAAE,KAAK;;;AAGjD;AAEA,oCAAc,WAAW,GAAG,CAAA,GAAA,yCAAiB,AAAD;IAE5C,2CAAe;;;ACrGf;;;;;;;;AAeA,MAAM,wDAAoB,CAAA,GAAA,sCAAI,EAAE,UAAU,CAGxC,CAAC,OAA4C,eAAiB;IAC9D,MAAM,iBAAE,cAAa,EAAE,GAAG,cAAc,GAAG;IAC3C,MAAM,UAAU,CAAA,GAAA,yCAAe,EAAE,CAAA,GAAA,yCAAiB,AAAD,GAAG;IAEpD,CAAA,GAAA,yCAAa,EAAE,CAAA,GAAA,yCAAgB,GAAG;IAElC,qBACE,gCAAC,CAAA,GAAA,sCAAQ,EAAE,GAAG;QACZ,cAAY,CAAA,GAAA,yCAAQ,AAAD,EAAE,QAAQ,IAAI;QAChC,GAAG,YAAY;QAChB,KAAK;QACL,OAAO;YAAE,eAAe;YAAQ,GAAG,aAAa,KAAK;QAAC;;AAG5D;AAEA,MAAM,oDAAgB,CAAA,GAAA,sCAAI,EAAE,UAAU,CAGpC,CAAC,OAAwC,eAAiB;IAC1D,MAAM,cAAE,WAAU,iBAAE,cAAa,EAAE,GAAG,cAAc,GAAG;IACvD,MAAM,UAAU,CAAA,GAAA,yCAAe,EAAE,CAAA,GAAA,yCAAiB,AAAD,GAAG;IACpD,MAAM,gBAAgB,CAAA,GAAA,yCAAe,EAAE,CAAA,GAAA,yCAAiB,AAAD,GAAG;IAE1D,OAAO,QAAQ,KAAK,iBAClB,gCAAC,CAAA,GAAA,oCAAQ,AAAD;QACN,SAAS,AAAC,CAAA,cAAc,cAAc,UAAU,AAAD,KAAM,QAAQ,IAAI;kBAEjE,cAAA,gCAAC;YACE,GAAG,YAAY;YAChB,KAAK;;SAGP,IAAI;AACV;AAEA,oCAAc,WAAW,GAAG,CAAA,GAAA,yCAAiB,AAAD;IAE5C,2CAAe;","sources":["packages/react/dialog/src/index.ts","packages/react/dialog/src/Root.tsx","packages/react/dialog/src/context.tsx","packages/react/dialog/src/Portal.tsx","packages/react/dialog/src/Content.tsx","packages/react/dialog/src/Overlay.tsx"],"sourcesContent":["import Dialog from \"./Root\";\nimport DialogPortal from \"./Portal\";\nimport DialogContent from \"./Content\";\nimport DialogOverlay from \"./Overlay\";\n\nexport type {\n  DialogProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n} from \"./interface\";\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogContent,\n  DialogOverlay,\n  DialogPortal as Portal,\n  DialogContent as Content,\n  DialogOverlay as Overlay,\n};\n","import React from \"react\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { DialogName, createDialogContext } from \"./context\";\n\nimport type {\n  ScopedProps,\n  DialogContextValue,\n  DialogProps,\n  DialogContentElement,\n} from \"./interface\";\n\nconst [DialogProvider, useDialogContext] =\n  createDialogContext<DialogContextValue>(DialogName, {\n    dialogId: \"\",\n    open: false,\n    onOpenChange: (val: boolean) => {},\n    onOpenToggle: () => {},\n    modal: true,\n  });\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      dialogId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(\n        () => setOpen((prevOpen) => !prevOpen),\n        [setOpen]\n      )}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nexport default Dialog;\n\nexport { useDialogContext };\n","import { createContextScope } from \"@radix-ui/react-context\";\n\nconst DialogName = \"Dialog\";\nconst DialogPresenceName = \"DialogPresence\";\nconst DialogOverlayName = \"DialogOverlay\";\nconst DialogContentName = \"DialogContent\";\nconst DialogPortalName = \"DialogPortal\";\n\nconst [createDialogContext, createDialogScope] = createContextScope(DialogName);\n\nconst getState = (open: boolean) => (open ? \"open\" : \"closed\");\n\nexport {\n  // const\n  DialogName,\n  DialogPresenceName,\n  DialogOverlayName,\n  DialogContentName,\n  DialogPortalName,\n\n  //   context\n  createDialogContext,\n  createDialogScope,\n\n  // util\n  getState,\n};\n","import React from \"react\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { useScrollLocker } from \"@roui/lock-scroll\";\n\nimport type {\n  ScopedProps,\n  PortalContextValue,\n  DialogPortalProps,\n  PresenceGroupContextValue,\n  Scope,\n} from \"./interface\";\n\nimport {\n  DialogPortalName,\n  createDialogContext,\n  DialogPresenceName,\n} from \"./context\";\nimport { useDialogContext } from \"./Root\";\n\nconst [PortalProvider, usePortalContext] =\n  createDialogContext<PortalContextValue>(DialogPortalName, {\n    forceMount: undefined,\n  });\n\nconst [PresenceProvider, usePresenceContext] =\n  createDialogContext<PresenceGroupContextValue>(DialogPresenceName, {\n    count: 0,\n  });\n\nconst PresenceGroup: React.FC<any> = (\n  props: ScopedProps<DialogPortalProps>\n) => {\n  const { open } = useDialogContext(DialogPresenceName, props.__scopeDialog);\n  const [count, setCount] = React.useState<number>(0);\n  const _open = open || (!open && count > 0);\n\n  useScrollLocker(_open);\n\n  return (\n    <PresenceProvider\n      onSub={() => setCount((prev) => prev + 1)}\n      onUnSub={() => setCount((prev) => (prev == 0 ? 0 : prev - 1))}\n      count={count}\n      scope={props.__scopeDialog}\n    >\n      {_open ? props.children : null}\n    </PresenceProvider>\n  );\n};\n\nconst DialogPortal: React.FC<DialogPortalProps> = (\n  props: ScopedProps<DialogPortalProps>\n) => {\n  const { __scopeDialog, forceMount, children, container, ...rest } = props;\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      <PortalPrimitive\n        container={container}\n        asChild={React.Children.count(children) < 2}\n        {...rest}\n      >\n        <PresenceGroup>{children}</PresenceGroup>\n      </PortalPrimitive>\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = DialogPortalName;\n\nexport const usePresenceSub = (consumerName: string, scope: Scope) => {\n  const pContext = usePresenceContext(consumerName, scope);\n  React.useEffect(() => {\n    pContext.onSub?.();\n    return () => {\n      pContext.onUnSub?.();\n    };\n  }, []);\n};\n\nexport default DialogPortal;\n\nexport { usePortalContext };\n","import * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\n\nimport type {\n  ScopedProps,\n  DialogContentProps,\n  DialogContentElement,\n  DialogContentTypeElement,\n  DialogContentTypeProps,\n} from \"./interface\";\nimport { DialogContentName, getState } from \"./context\";\n\nimport { usePortalContext, usePresenceSub } from \"./Portal\";\nimport { useDialogContext } from \"./Root\";\n\nconst DialogContentModal = React.forwardRef<\n  DialogContentTypeElement,\n  DialogContentTypeProps\n>((props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n  const { __scopeDialog, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } =\n    props;\n\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  const context = useDialogContext(DialogContentName, __scopeDialog);\n\n  const composedRefs = useComposedRefs(\n    forwardedRef,\n    context.contentRef,\n    contentRef\n  );\n  usePresenceSub(DialogContentName, __scopeDialog);\n  useFocusGuards();\n\n  return (\n    <FocusScope\n      asChild\n      loop\n      trapped={context.open}\n      onMountAutoFocus={onOpenAutoFocus}\n      onUnmountAutoFocus={composeEventHandlers(\n        props.onCloseAutoFocus,\n        (event) => {\n          event.preventDefault();\n          context.triggerRef?.current?.focus();\n        }\n      )}\n    >\n      <DismissableLayer\n        role=\"dialog\"\n        id={`${context.dialogId}content`}\n        aria-describedby={`${context.dialogId}description`}\n        aria-labelledby={`${context.dialogId}title`}\n        data-state={getState(context.open)}\n        aria-modal=\"true\"\n        {...contentProps}\n        onPointerDownOutside={composeEventHandlers(\n          props.onPointerDownOutside,\n          (event) => {\n            const originalEvent = event.detail.originalEvent;\n            const ctrlLeftClick =\n              originalEvent.button === 0 && originalEvent.ctrlKey === true;\n            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n            // If the event is a right-click, we shouldn't close because\n            // it is effectively as if we right-clicked the `Overlay`.\n            if (isRightClick) event.preventDefault();\n          }\n        )}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n        ref={composedRefs}\n        onDismiss={() => context.onOpenChange(false)}\n      />\n    </FocusScope>\n  );\n});\n\nconst DialogContent = React.forwardRef<\n  DialogContentElement,\n  DialogContentProps\n>((props: ScopedProps<DialogContentProps>, forwardedRef) => {\n  const { __scopeDialog, forceMount, ...contentProps } = props;\n  const portalContext = usePortalContext(DialogContentName, __scopeDialog);\n  const context = useDialogContext(DialogContentName, __scopeDialog);\n  return (\n    <Presence\n      present={(forceMount ?? portalContext.forceMount) || context.open}\n    >\n      <DialogContentModal {...contentProps} ref={forwardedRef} />\n    </Presence>\n  );\n});\n\nDialogContent.displayName = DialogContentName;\n\nexport default DialogContent;\n","import React from \"react\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { DialogOverlayName, getState } from \"./context\";\nimport { usePortalContext } from \"./Portal\";\nimport { useDialogContext } from \"./Root\";\nimport { usePresenceSub } from \"./Portal\";\nimport type {\n  ScopedProps,\n  DialogOverlayProps,\n  DialogOverlayElement,\n  DialogOverlayImplProps,\n  DialogOverlayImplElement,\n} from \"./interface\";\n\nconst DialogOverlayImpl = React.forwardRef<\n  DialogOverlayImplElement,\n  DialogOverlayImplProps\n>((props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n  const { __scopeDialog, ...overlayProps } = props;\n  const context = useDialogContext(DialogOverlayName, __scopeDialog);\n\n  usePresenceSub(DialogOverlayName, __scopeDialog);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      {...overlayProps}\n      ref={forwardedRef}\n      style={{ pointerEvents: \"auto\", ...overlayProps.style }}\n    />\n  );\n});\n\nconst DialogOverlay = React.forwardRef<\n  DialogOverlayElement,\n  DialogOverlayProps\n>((props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n  const { forceMount, __scopeDialog, ...overlayProps } = props;\n  const context = useDialogContext(DialogOverlayName, __scopeDialog);\n  const portalContext = usePortalContext(DialogOverlayName, __scopeDialog);\n\n  return context.modal ? (\n    <Presence\n      present={(forceMount ?? portalContext.forceMount) || context.open}\n    >\n      <DialogOverlayImpl\n        {...overlayProps}\n        ref={forwardedRef}\n      ></DialogOverlayImpl>\n    </Presence>\n  ) : null;\n});\n\nDialogOverlay.displayName = DialogOverlayName;\n\nexport default DialogOverlay;\n"],"names":[],"version":3,"file":"index.js.map"}